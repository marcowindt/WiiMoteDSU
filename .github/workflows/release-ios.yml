name: Release iOS

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release, 0.5.1 (without 'v')"
        required: true

jobs:
  ios:
    runs-on: macos-latest

    env:
      FLUTTER_VERSION: "3.3.10"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.API_GITHUB_TOKEN }}
          # default is '', i.e. commit that triggered this event
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version != '' && format('refs/tags/v{0}', github.event.inputs.version) || ''}}

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Deps
        id: deps
        run: flutter pub get
      
      - name: Setup version and tag
        id: setup
        run: |
          if [ ${{ github.event_name }} != 'workflow_dispatch' ]; then
            echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
            echo "version=${GITHUB_REF##*/v}" >> $GITHUB_OUTPUT
          else
            echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build (GitHub)
        run: |
          flutter build ios --no-codesign --release
          cd build/ios/
          mv iphoneos Payload
          zip -r WiiMoteDSU-${{ steps.setup.outputs.tag }}.ipa Payload

      - name: Upload assets
        uses: AButler/upload-release-assets@v2.0
        with:
          files: build/ios/WiiMoteDSU-${{ steps.setup.outputs.tag }}.ipa
          release-tag: ${{ steps.setup.outputs.tag }}
          repo-token: ${{ secrets.API_GITHUB_TOKEN }}

      - name: Update Bundle identifier
        uses: damienaicheh/update-ios-bundle-identifier-action@v1.0.0
        with:
          info-plist-path: 'ios/Runner/Info.plist'
          bundle-identifier: 'nl.dijkitech.wiimote-dsu'
          bundle-name: 'DSU Remote'
          bundle-display-name: 'DSU Remote'
          print-file: true

      - name: Build (App Store)
        env:
          BUILD_EXPORT_OPTIONS_BASE64: ${{ secrets.BUILD_EXPORT_OPTIONS_BASE64 }}
        run: |
          echo -n "$BUILD_EXPORT_OPTIONS_BASE64" | base64 --decode -o $RUNNER_TEMP/ExportOptions.plist
          flutter build ipa --release --export-options-plist=$RUNNER_TEMP/ExportOptions.plist

      - name: Setup App Store API key
        env:
          APP_STORE_API_KEY_BASE64: ${{ secrets.APP_STORE_API_KEY_BASE64 }}
        run: echo -n "$APP_STORE_API_KEY_BASE64" | base64 --decode -o ~/private_keys/AuthKey_${{ secrets.APP_STORE_API_KEY_ID }}.p8
      
      - name: Upload to App Store
        run: xcrun altool --upload-app --type ios -f build/ios/ipa/wiimote_dsu.ipa --apiKey "${{ secrets.APP_STORE_API_KEY_ID }}" --apiIssuer "${{ secrets.APP_STORE_ISSUER_ID }}"

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
